[{"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\index.js":"1","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\App.js":"2","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\context\\AuthContext.js":"3","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Login.js":"4","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Feed.js":"5","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Signup.js":"6","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\ProtectedRoute.js":"7","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Profile.js":"8","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\CreatePost.js":"9","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Post.js":"10","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Modal.js":"11","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Sidebar.js":"12","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\SkeletonPost.js":"13","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\context\\ThemeContext.js":"14","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\ThemeToggle.js":"15","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\UserPosts.js":"16"},{"size":394,"mtime":1750508643770,"results":"17","hashOfConfig":"18"},{"size":1717,"mtime":1750625200684,"results":"19","hashOfConfig":"18"},{"size":719,"mtime":1750505878632,"results":"20","hashOfConfig":"18"},{"size":3852,"mtime":1750615217897,"results":"21","hashOfConfig":"18"},{"size":1300,"mtime":1750596871382,"results":"22","hashOfConfig":"18"},{"size":4951,"mtime":1750615206306,"results":"23","hashOfConfig":"18"},{"size":620,"mtime":1750509872408,"results":"24","hashOfConfig":"18"},{"size":18506,"mtime":1750625150135,"results":"25","hashOfConfig":"18"},{"size":8884,"mtime":1750624454475,"results":"26","hashOfConfig":"18"},{"size":6179,"mtime":1750624512958,"results":"27","hashOfConfig":"18"},{"size":1555,"mtime":1750624475496,"results":"28","hashOfConfig":"18"},{"size":3234,"mtime":1750624660630,"results":"29","hashOfConfig":"18"},{"size":651,"mtime":1750595060557,"results":"30","hashOfConfig":"18"},{"size":1044,"mtime":1750508614041,"results":"31","hashOfConfig":"18"},{"size":548,"mtime":1750508628236,"results":"32","hashOfConfig":"18"},{"size":2998,"mtime":1750601290787,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"b8he8",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\index.js",[],["70","71"],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\App.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\context\\AuthContext.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Login.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Feed.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Signup.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\ProtectedRoute.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Profile.js",["72"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport UserPosts from './UserPosts';\r\nimport './Profile.css';\r\n\r\nconst Profile = () => {\r\n    const [user, setUser] = useState(null);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [avatarFile, setAvatarFile] = useState(null);\r\n    const [avatarPreview, setAvatarPreview] = useState('');\r\n    const [uploadingAvatar, setUploadingAvatar] = useState(false);\r\n    const { token } = useContext(AuthContext);\r\n\r\n    const CLOUDINARY_CLOUD_NAME = 'duntpleg0';\r\n    const CLOUDINARY_UPLOAD_PRESET = 'social_media_uploads';\r\n\r\n    const fetchUserProfile = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await fetch('/api/users/profile', {\r\n                headers: { 'Authorization': `Bearer ${token}` }\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch profile');\r\n            }\r\n            \r\n            const data = await response.json();\r\n     \r\n            setUser(data);\r\n            setError('');\r\n        } catch (err) {\r\n            console.error('Error fetching profile:', err);\r\n            setError('Failed to load profile');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            fetchUserProfile();\r\n        }\r\n    }, [token]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setUser(prevUser => ({ ...prevUser, [name]: value }));\r\n    };\r\n\r\n    const handleAvatarChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (file) {\r\n            if (!file.type.startsWith('image/')) {\r\n                alert('Please select an image file');\r\n                return;\r\n            }\r\n            \r\n            if (file.size > 2 * 1024 * 1024) {\r\n                alert('Avatar image size should be less than 2MB');\r\n                return;\r\n            }\r\n\r\n            setAvatarFile(file);\r\n            \r\n            const previewUrl = URL.createObjectURL(file);\r\n            setAvatarPreview(previewUrl);\r\n        }\r\n    };\r\n\r\n    const uploadAvatarToCloudinary = async (file) => {\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);\r\n        formData.append('folder', 'social-media-avatars');\r\n\r\n        try {\r\n            \r\n            const response = await fetch(\r\n                `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`,\r\n                {\r\n                    method: 'POST',\r\n                    body: formData\r\n                }\r\n            );\r\n\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(`Avatar upload failed: ${errorData.error?.message || 'Unknown error'}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            \r\n            const transformedUrl = data.secure_url.replace('/upload/', '/upload/w_200,h_200,c_fill,g_face,r_max,q_auto,f_auto/');\r\n\r\n            return transformedUrl;\r\n        } catch (error) {\r\n            console.error('Cloudinary avatar upload error:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsSubmitting(true);\r\n        setError('');\r\n        \r\n        try {\r\n            let updatedUser = { \r\n                ...user,\r\n                name: user.name,\r\n                email: user.email,\r\n                bio: user.bio || '',\r\n                profilePicture: user.profilePicture || ''\r\n            };\r\n            \r\n            if (avatarFile) {\r\n                setUploadingAvatar(true);\r\n                try {\r\n                    const avatarUrl = await uploadAvatarToCloudinary(avatarFile);\r\n                    updatedUser.profilePicture = avatarUrl;\r\n                } catch (error) {\r\n                    console.error('Avatar upload failed:', error);\r\n                    alert(`Failed to upload avatar: ${error.message}`);\r\n                    return;\r\n                } finally {\r\n                    setUploadingAvatar(false);\r\n                }\r\n            }\r\n\r\n\r\n            const response = await fetch('/api/users/profile', {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                },\r\n                body: JSON.stringify(updatedUser),\r\n            });\r\n            \r\n            if (response.ok) {\r\n                const savedUser = await response.json();\r\n                \r\n                const completeUserData = {\r\n                    ...user, \r\n                    ...savedUser,\r\n                    name: savedUser.name || user.name,\r\n                    email: savedUser.email || user.email,\r\n                    bio: savedUser.bio !== undefined ? savedUser.bio : user.bio,\r\n                    profilePicture: savedUser.profilePicture || user.profilePicture\r\n                };\r\n                \r\n                console.log('setting complete user data:', completeUserData); \r\n                \r\n                setUser(completeUserData);\r\n                \r\n                setIsEditing(false);\r\n                setAvatarFile(null);\r\n                if (avatarPreview) {\r\n                    URL.revokeObjectURL(avatarPreview);\r\n                    setAvatarPreview('');\r\n                }\r\n                \r\n                console.log('profile updated successfully'); \r\n                \r\n                setTimeout(() => {\r\n                    fetchUserProfile();\r\n                }, 500);\r\n                \r\n            } else {\r\n                const errorData = await response.json();\r\n                console.error('profile update failed:', errorData);\r\n                setError(`failed to update profile: ${errorData.message || 'Unknown error'}`);\r\n            }\r\n        } catch (err) {\r\n            console.error('profile update error:', err);\r\n            setError('failed to update profile. Please try again.');\r\n        } finally {\r\n            setIsSubmitting(false);\r\n        }\r\n    };\r\n\r\n    const removeAvatar = () => {\r\n        setAvatarFile(null);\r\n        if (avatarPreview) {\r\n            URL.revokeObjectURL(avatarPreview);\r\n            setAvatarPreview('');\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"profile-loading\">\r\n                <div className=\"loading-spinner\"></div>\r\n                <p>Loading profile...</p>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    if (error && !user) {\r\n        return (\r\n            <div className=\"profile-error\">\r\n                <p>{error}</p>\r\n                <button onClick={fetchUserProfile} className=\"retry-btn\">\r\n                    Try Again\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    if (!user) {\r\n        return (\r\n            <div className=\"profile-error\">\r\n                <p>No user data found</p>\r\n                <button onClick={fetchUserProfile} className=\"retry-btn\">\r\n                    Reload Profile\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-page\">\r\n            <div className=\"profile-container\">\r\n                {isEditing ? (\r\n                    <div className=\"profile-edit-section\">\r\n                        <div className=\"profile-edit-container\">\r\n                            <div className=\"edit-header\">\r\n                                <h1>Edit Profile</h1>\r\n                                <p>Update your information to personalize your experience</p>\r\n                            </div>\r\n\r\n                            {error && (\r\n                                <div className=\"error-message\">{error}</div>\r\n                            )}\r\n\r\n                            <form onSubmit={handleSubmit} className=\"edit-form\">\r\n                                <div className=\"form-section\">\r\n                                    <h3>Basic Information</h3>\r\n                                    <div className=\"form-row\">\r\n                                        <div className=\"form-group\">\r\n                                            <label>Full Name *</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"name\"\r\n                                                value={user.name || ''}\r\n                                                onChange={handleChange}\r\n                                                placeholder=\"Enter your full name\"\r\n                                                required\r\n                                                disabled={isSubmitting}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label>Email Address</label>\r\n                                            <input\r\n                                                type=\"email\"\r\n                                                value={user.email || ''}\r\n                                                disabled\r\n                                                className=\"disabled-input\"\r\n                                            />\r\n                                            <small>Email address cannot be changed</small>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-section\">\r\n                                    <h3>Profile Picture</h3>\r\n                                    <div className=\"profile-pic-section\">\r\n                                        <div className=\"current-pic\">\r\n                                            <img \r\n                                                src={avatarPreview || user.profilePicture || '/default-profile.png'} \r\n                                                alt=\"Profile\" \r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pic-input\">\r\n                                            <div className=\"upload-controls\">\r\n                                                <label htmlFor=\"avatar-upload\" className=\"avatar-upload-label\">\r\n                                                    📷 Change Avatar\r\n                                                </label>\r\n                                                <input\r\n                                                    id=\"avatar-upload\"\r\n                                                    type=\"file\"\r\n                                                    accept=\"image/*\"\r\n                                                    onChange={handleAvatarChange}\r\n                                                    disabled={isSubmitting}\r\n                                                    style={{ display: 'none' }}\r\n                                                />\r\n                                                \r\n                                                {avatarFile && (\r\n                                                    <button \r\n                                                        type=\"button\" \r\n                                                        className=\"remove-avatar-btn\"\r\n                                                        onClick={removeAvatar}\r\n                                                        disabled={isSubmitting}\r\n                                                    >\r\n                                                        Remove\r\n                                                    </button>\r\n                                                )}\r\n                                            </div>\r\n                                            \r\n                                            {avatarFile && (\r\n                                                <div className=\"file-info\">\r\n                                                    {avatarFile.name} ({(avatarFile.size / 1024 / 1024).toFixed(2)}MB)\r\n                                                </div>\r\n                                            )}\r\n                                            \r\n                                            <small>Upload a square image for best results. Max size: 2MB</small>\r\n                                            \r\n                                            {/* URL input as fallback */}\r\n                                            <div className=\"url-fallback\">\r\n                                                <label>Or enter image URL</label>\r\n                                                <input\r\n                                                    type=\"url\"\r\n                                                    name=\"profilePicture\"\r\n                                                    value={user.profilePicture || ''}\r\n                                                    onChange={handleChange}\r\n                                                    placeholder=\"https://example.com/your-photo.jpg\"\r\n                                                    disabled={isSubmitting || !!avatarFile}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-section\">\r\n                                    <h3>About You</h3>\r\n                                    <div className=\"form-group\">\r\n                                        {/* <label>Bio</label> */}\r\n                                        <textarea\r\n                                            name=\"bio\"\r\n                                            value={user.bio || ''}\r\n                                            onChange={handleChange}\r\n                                            placeholder=\"Tell others about yourself...\"\r\n                                            rows=\"4\"\r\n                                            disabled={isSubmitting}\r\n                                            maxLength=\"300\"\r\n                                        />\r\n                                        <small>Share a bit about yourself ({(user.bio || '').length}/300)</small>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"form-actions-alt\">\r\n                                    <button \r\n                                        type=\"button\" \r\n                                        className=\"btn-cancel-alt\" \r\n                                        onClick={() => {\r\n                                            setIsEditing(false);\r\n                                            removeAvatar();\r\n                                            setError('');\r\n                                            fetchUserProfile();\r\n                                        }}\r\n                                        disabled={isSubmitting}\r\n                                    >\r\n                                        Cancel\r\n                                    </button>\r\n                                    <button \r\n                                        type=\"submit\" \r\n                                        className=\"btn-save-alt\"\r\n                                        disabled={isSubmitting || uploadingAvatar}\r\n                                    >\r\n                                        {uploadingAvatar ? 'Uploading Avatar...' : isSubmitting ? 'Saving...' : 'Save Changes'}\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        <div className=\"profile-info-section\">\r\n                            <div className=\"profile-display-section\">\r\n                                <div className=\"profile-header\">\r\n                                    <div className=\"profile-avatar\">\r\n                                        <img \r\n                                            src={user.profilePicture || '/default-profile.png'} \r\n                                            alt=\"Profile\" \r\n                                            className=\"profile-image\"\r\n                                            key={user.profilePicture} // Force re-render when avatar changes\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"profile-info\">\r\n                                        <h1 className=\"profile-name\">{user.name || 'No name provided'}</h1>\r\n                                        <p className=\"profile-email\">{user.email || 'No email'}</p>\r\n                                        <p className=\"profile-bio\">{user.bio || 'No bio available'}</p>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className=\"profile-actions\">\r\n                                    <button \r\n                                        className=\"edit-profile-btn\" \r\n                                        onClick={() => setIsEditing(true)}\r\n                                    >\r\n                                        Edit Profile\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"profile-posts-section\">\r\n                            <div className=\"posts-section-content\">\r\n                                <UserPosts />\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\CreatePost.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Post.js",["73"],"import React, { useState, useEffect, useContext } from 'react';\nimport { FiHeart, FiMoreHorizontal, FiTrash2 } from 'react-icons/fi';\nimport { AuthContext } from '../context/AuthContext';\nimport './Post.css';\n\nconst formatTimestamp = (timestamp) => {\n    const now = new Date();\n    \n    let postDate;\n    try {\n        if (typeof timestamp === 'string') {\n            postDate = new Date(timestamp.endsWith('Z') ? timestamp : timestamp + 'Z');\n        } else {\n            postDate = new Date(timestamp);\n        }\n        \n        if (isNaN(postDate.getTime())) {\n            console.error('Invalid timestamp:', timestamp);\n            return 'Invalid date';\n        }\n    } catch (error) {\n        console.error('Error parsing timestamp:', timestamp, error);\n        return 'Invalid date';\n    }\n    \n    const diffInSeconds = Math.floor((now - postDate) / 1000);\n    \n    if (diffInSeconds < 60) {\n        return 'Just now';\n    } else if (diffInSeconds < 3600) {\n        const minutes = Math.floor(diffInSeconds / 60);\n        return `${minutes}m ago`;\n    } else if (diffInSeconds < 86400) {\n        const hours = Math.floor(diffInSeconds / 3600);\n        return `${hours}h ago`;\n    } else if (diffInSeconds < 604800) {\n        const days = Math.floor(diffInSeconds / 86400);\n        return `${days}d ago`;\n    } else {\n        return postDate.toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric',\n            year: postDate.getFullYear() !== now.getFullYear() ? 'numeric' : undefined\n        });\n    }\n};\n\nconst Post = ({ post, onPostDeleted }) => {\n    const [likes, setLikes] = useState(post.likes);\n    const [isLiked, setIsLiked] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [showOptions, setShowOptions] = useState(false);\n    const [isDeleting, setIsDeleting] = useState(false);\n    const [currentUserId, setCurrentUserId] = useState(null);\n    const { token } = useContext(AuthContext);\n\n    useEffect(() => {\n        if (token) {\n            try {\n                const payload = JSON.parse(atob(token.split('.')[1]));\n                setCurrentUserId(payload.sub);\n            } catch (error) {\n                console.error('Error parsing token:', error);\n            }\n        }\n    }, [token]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setLikes(prev => prev); \n        }, 60000); \n\n        return () => clearInterval(interval);\n    }, []);\n\n    const handleLike = async () => {\n        if (isLoading) return;\n        \n        setIsLoading(true);\n        \n        try {\n            const response = await fetch(`/api/posts/${post._id}/like`, {\n                method: 'POST',\n            });\n            const data = await response.json();\n            \n            if (response.ok) {\n                setLikes(data.likes);\n            }\n        } catch (error) {\n            console.error('Error liking post:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleDelete = async () => {\n        if (isDeleting) return;\n        \n        if (!window.confirm('Are you sure you want to delete this post?')) {\n            return;\n        }\n\n        setIsDeleting(true);\n        \n        try {\n            const response = await fetch(`/api/posts/${post._id}`, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': `Bearer ${token}`\n                }\n            });\n\n            if (response.ok) {\n                if (onPostDeleted) {\n                    onPostDeleted(post._id);\n                }\n            } else {\n                const data = await response.json();\n                alert(data.error || 'Failed to delete post');\n            }\n        } catch (error) {\n            console.error('Error deleting post:', error);\n            alert('Failed to delete post');\n        } finally {\n            setIsDeleting(false);\n            setShowOptions(false);\n        }\n    };\n\n    const isAuthor = currentUserId && post.author.id === currentUserId;\n\n    return (\n        <div className=\"post-card\">\n            <div className=\"post-header\">\n                <img \n                    src={post.author.profile_picture || '/default-profile.png'} \n                    alt={post.author.name} \n                    className=\"post-author-img\"\n                />\n                <div className=\"post-author-info\">\n                    <span className=\"post-author-name\">{post.author.name}</span>\n                    <span className=\"post-timestamp\">{formatTimestamp(post.created_at)}</span>\n                </div>\n                {isAuthor && (\n                    <div className=\"post-options\">\n                        <button \n                            className=\"post-options-button\"\n                            onClick={() => setShowOptions(!showOptions)}\n                        >\n                            <FiMoreHorizontal />\n                        </button>\n                        {showOptions && (\n                            <div className=\"post-options-menu\">\n                                <button \n                                    className=\"delete-button\"\n                                    onClick={handleDelete}\n                                    disabled={isDeleting}\n                                >\n                                    <FiTrash2 />\n                                    {isDeleting ? 'Deleting...' : 'Delete'}\n                                </button>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n            <p className=\"post-content\">{post.content}</p>\n            {post.image && <img src={post.image} alt=\"\" className=\"post-image\" />}\n            <div className=\"post-actions\">\n                <button \n                    onClick={handleLike} \n                    className={`like-button ${isLiked ? 'liked' : ''}`}\n                    disabled={isLoading}\n                >\n                    <FiHeart />\n                    <span>{likes}</span>\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Post;","D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Modal.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\Sidebar.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\SkeletonPost.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\context\\ThemeContext.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\ThemeToggle.js",[],"D:\\Code\\future university\\test\\social-media-app\\frontend\\src\\components\\UserPosts.js",["74"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport Post from './Post';\r\nimport SkeletonPost from './SkeletonPost';\r\nimport './UserPosts.css';\r\n\r\nconst UserPosts = () => {\r\n    const [posts, setPosts] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState('');\r\n    const { token } = useContext(AuthContext);\r\n\r\n    const fetchUserPosts = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch('/api/posts/my-posts', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch posts');\r\n            }\r\n            \r\n            const data = await response.json();\r\n            setPosts(data);\r\n        } catch (err) {\r\n            setError('Failed to load your posts');\r\n            console.error('Error fetching user posts:', err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            fetchUserPosts();\r\n        }\r\n    }, [token]);\r\n\r\n    const handlePostDeleted = (postId) => {\r\n        setPosts(prevPosts => prevPosts.filter(post => post._id !== postId));\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <>\r\n                <div className=\"posts-section-header\">\r\n                    <h3 className=\"posts-section-title\">My Posts</h3>\r\n                </div>\r\n                <SkeletonPost />\r\n                <SkeletonPost />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <>\r\n                <div className=\"posts-section-header\">\r\n                    <h3 className=\"posts-section-title\">My Posts</h3>\r\n                </div>\r\n                <div className=\"user-posts-error\">{error}</div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"posts-section-header\">\r\n                <h3 className=\"posts-section-title\">\r\n                    My Posts\r\n                    <span className=\"posts-count-badge\">{posts.length}</span>\r\n                </h3>\r\n            </div>\r\n            \r\n            {posts.length === 0 ? (\r\n                <div className=\"no-posts-message\">\r\n                    <p>You haven't created any posts yet.</p>\r\n                    <p>Click the \"Create\" button in the sidebar to share your first post!</p>\r\n                </div>\r\n            ) : (\r\n                <div className=\"posts-feed\">\r\n                    {posts.map(post => (\r\n                        <Post \r\n                            key={post._id} \r\n                            post={post} \r\n                            onPostDeleted={handlePostDeleted}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UserPosts;",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":47,"column":8,"nodeType":"81","endLine":47,"endColumn":15,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":50,"column":21,"nodeType":"85","messageId":"86","endLine":50,"endColumn":31},{"ruleId":"79","severity":1,"message":"87","line":40,"column":8,"nodeType":"81","endLine":40,"endColumn":15,"suggestions":"88"},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchUserProfile'. Either include it or remove the dependency array.","ArrayExpression",["91"],"no-unused-vars","'setIsLiked' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'fetchUserPosts'. Either include it or remove the dependency array.",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},"Update the dependencies array to be: [fetchUserProfile, token]",{"range":"97","text":"98"},"Update the dependencies array to be: [fetchUserPosts, token]",{"range":"99","text":"100"},[1607,1614],"[fetchUserProfile, token]",[1231,1238],"[fetchUserPosts, token]"]
{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\future university\\\\test\\\\social-media-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, createElement as _createElement } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Feed from './components/Feed';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Signup from './components/Signup';\nimport Sidebar from './components/Sidebar';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport Modal from './components/Modal';\nimport CreatePost from './components/CreatePost';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isCreatePostModalOpen, setCreatePostModalOpen] = useState(false);\n  // This state is used to force the Feed to re-fetch posts\n  const [refreshFeedKey, setRefreshFeedKey] = useState(0);\n  const handlePostCreated = useCallback(() => {\n    setCreatePostModalOpen(false);\n    setRefreshFeedKey(prevKey => prevKey + 1);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      onOpenCreatePostModal: () => setCreatePostModalOpen(true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          component: Login\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          component: Signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          path: \"/profile\",\n          component: Profile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          render: props => /*#__PURE__*/_createElement(Feed, {\n            ...props,\n            key: refreshFeedKey,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 32\n            }\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: isCreatePostModalOpen,\n      onClose: () => setCreatePostModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(CreatePost, {\n        onPostCreated: handlePostCreated\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LIwigSdYScDGp/VpPO7vcqtsxZU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useCallback","createElement","_createElement","BrowserRouter","Router","Route","Switch","Feed","Login","Profile","Signup","Sidebar","ProtectedRoute","Modal","CreatePost","jsxDEV","_jsxDEV","App","_s","isCreatePostModalOpen","setCreatePostModalOpen","refreshFeedKey","setRefreshFeedKey","handlePostCreated","prevKey","children","onOpenCreatePostModal","fileName","_jsxFileName","lineNumber","columnNumber","className","path","component","render","props","key","__self","__source","show","onClose","onPostCreated","_c","$RefreshReg$"],"sources":["D:/Code/future university/test/social-media-app/frontend/src/App.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Feed from './components/Feed';\nimport Login from './components/Login';\nimport Profile from './components/Profile';\nimport Signup from './components/Signup';\nimport Sidebar from './components/Sidebar';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport Modal from './components/Modal';\nimport CreatePost from './components/CreatePost';\nimport './App.css';\n\nfunction App() {\n  const [isCreatePostModalOpen, setCreatePostModalOpen] = useState(false);\n  // This state is used to force the Feed to re-fetch posts\n  const [refreshFeedKey, setRefreshFeedKey] = useState(0);\n\n  const handlePostCreated = useCallback(() => {\n    setCreatePostModalOpen(false);\n    setRefreshFeedKey(prevKey => prevKey + 1); \n  }, []);\n\n  return (\n    <Router>\n      <Sidebar onOpenCreatePostModal={() => setCreatePostModalOpen(true)} />\n      <main className=\"app-container\">\n        <Switch>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <ProtectedRoute path=\"/profile\" component={Profile} />\n          <Route \n            path=\"/\" \n            render={(props) => <Feed {...props} key={refreshFeedKey} />} \n          />\n        </Switch>\n      </main>\n\n      <Modal show={isCreatePostModalOpen} onClose={() => setCreatePostModalOpen(false)}>\n        <CreatePost onPostCreated={handlePostCreated} />\n      </Modal>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}